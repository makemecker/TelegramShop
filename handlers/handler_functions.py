from keyboards.kb_generator import create_inline_kb
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from aiogram.types import Message, BufferedInputFile
from aiogram.enums.chat_action import ChatAction
from keyboards.products_from_catalog import product_markup


async def checkout(state: FSMContext, threshold: int, admins: list, bot: Bot, message=None, info_to_admin=False):
    answer = ''
    total_price = 0

    data = await state.get_data()
    for title, price, count_in_cart in data['products'].values():
        tp = count_in_cart * price
        answer += f'<b>{title}</b> * {count_in_cart}—à—Ç. = {tp}‚ÇΩ\n'
        total_price += tp

    delivery = ''
    if total_price < threshold:
        delivery = f'\n\n –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–µ {threshold}‚ÇΩ, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–ª–∞—Ç–Ω–∞—è. ' + \
                   ('–ù–∞–¥–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –∫–ª–∏–µ–Ω—Ç–∞' if info_to_admin
                    else '–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–æ–±—â–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ.')
    if info_to_admin:
        for admin_id in admins:
            await bot.send_message(admin_id,
                                   f'{answer}\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price}‚ÇΩ. {delivery}')
    else:
        markup = create_inline_kb('all_right', 'back')
        await message.answer(f'{answer}\n–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_price}‚ÇΩ. {delivery}',
                             reply_markup=markup)


async def confirm(message: Message):
    markup = create_inline_kb('confirm', 'back')
    await message.answer('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑.',
                         reply_markup=markup)


async def show_products(message: Message, products: list, bot: Bot):
    if len(products) == 0:

        await message.answer('–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç üò¢')

    else:

        await bot.send_chat_action(message.chat.id, ChatAction.TYPING)

        for idx, title, body, image, price, _ in products:
            markup = product_markup(idx, price)
            text = f'<b>{title}</b>\n\n{body}'

            await message.answer_photo(photo=BufferedInputFile(image, filename=text),
                                       caption=text,
                                       reply_markup=markup)
        transition_markup = create_inline_kb('menu', 'catalog', 'cart')
        await message.answer(text='–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?',
                             reply_markup=transition_markup)
